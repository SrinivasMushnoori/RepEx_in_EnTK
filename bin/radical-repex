#!/usr/bin/env python

import sys

import radical.utils as ru
import radical.repex as rr


# ------------------------------------------------------------------------------
#
def exchange_by_random():
    '''
    This method is run as workload of exchange tasks.  It will receive two
    arguments: the number of replicas to exchange, and the cycle (?).
    '''

    import sys
    import random

    replicas = int(sys.argv[1])
    cycle    = int(sys.argv[2])

    exchange_list_1 = range(replicas)
    exchange_list_2 = range(replicas)

    random.shuffle(exchange_list_1)
    random.shuffle(exchange_list_2)

    exchangePairs = zip(exchange_list_2, exchange_list_2)

    with open('exchangePairs_%d.dat' % cycle, 'w') as f:
        for p in exchangePairs:
            line = ' '.join(str(x) for x in p)
            f.write(line + '\n')


# ------------------------------------------------------------------------------
#
if __name__ == '__main__':

    # check what workload the replicas should run
    if len(sys.argv) != 2:
        print '\n\tError: missing workload\n\tUsage: %s <workload.json>\n\n'
        sys.exit(1)

    wl = ru.read_json(sys.argv[1])

    # create the required number of replicas
    replicas = list()
    for i in range(wl['replicas']):
        properties = {'rid'  : i,
                      'temp' : 123.45 + float(i / 10),
                      'foo'  : 'bar'}
        replica = rr.Replica(workload=wl, properties=properties)
        replicas.append(replica)

    # create and run the replica exchange ensemble
    exchange = rr.Exchange(replicas=replicas,
                           replica_cycles=wl['cycles'],
                           selection_algorithm=select_replicas_1D,
                           selection_criteria=wl['criteria'],
                           exchange_algorithm=exchange_by_random)
    exchange.run()
    exchange.terminate()


# ------------------------------------------------------------------------------

